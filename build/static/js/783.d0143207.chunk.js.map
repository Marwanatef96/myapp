{"version":3,"file":"static/js/783.d0143207.chunk.js","mappings":"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","sources":["Pages/MainPage/latest/mangaLoader.js","Pages/MainPage/Popular/PopularLoader.js","Pages/MainPage/Popular/PopularSlider.js","Pages/MainPage/Popular/backgroundCard.js","Pages/MainPage/Popular/BgCardSkeleton.js","Pages/MainPage/Popular/PopularManga.js","Pages/MainPage/latest/MangaChapters.js","Pages/MainPage/latest/MangaChips.js","Pages/MainPage/latest/MangaCard.js","Pages/MainPage/latest/sectionTitle.js","Pages/MainPage/latest/LatestManga.js","Pages/MainPage/HomePage.js"],"sourcesContent":["/** @format */\r\nimport { Grid, Card, CardContent, Skeleton, Box } from \"@mui/material\";\r\n\r\n\r\nexport default function LatestMangaSkeleton({ dataLength = 12 }) {\r\n    const columnSize = 4; // md: 3 → 4 columns per row\r\n    const columnsPerRow = 12 / columnSize;\r\n\r\n    const remainder = dataLength % columnsPerRow;\r\n    const emptySlots = remainder === 0 ? 3 : columnsPerRow - remainder;\r\n    return (\r\n        <>\r\n            {Array.from({ length: emptySlots }).map((_, index) => (\r\n                <Grid size={{ xs: 12, sm: 6, md: 4 }} key={index}>\r\n                    <Card\r\n                        sx={{\r\n                            width: \"100%\",\r\n                            height: \"262px\",\r\n                            display: \"flex\",\r\n                            borderRadius: 3,\r\n                            boxShadow: 3,\r\n                            overflow: \"hidden\",\r\n                        }}>\r\n                        {/* Image skeleton */}\r\n                        <Skeleton\r\n                            variant='rectangular'\r\n                            sx={{\r\n                                width: { xs: \"100%\", sm: 180, md: 200 },\r\n                                height: { xs: 200, sm: \"auto\", md: 250 },\r\n                                flexShrink: 0,\r\n                            }}\r\n                        />\r\n\r\n                        {/* Content skeleton */}\r\n                        <CardContent sx={{ flex: 1 }}>\r\n                            <Skeleton variant='text' width='60%' height={30} />\r\n                            <Skeleton variant='text' width='40%' />\r\n                            <Box mt={2}>\r\n                                <Skeleton\r\n                                    variant='rectangular'\r\n                                    height={36}\r\n                                    sx={{ mb: 1 }}\r\n                                />\r\n                                <Skeleton\r\n                                    variant='rectangular'\r\n                                    height={36}\r\n                                    sx={{ mb: 1 }}\r\n                                />\r\n                                <Skeleton variant='rectangular' height={36} />\r\n                            </Box>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","/** @format */\r\n\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Navigation, Autoplay } from \"swiper/modules\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\n\r\nimport { Card, Box, Skeleton } from \"@mui/material\";\r\n\r\nexport default function PopularSkeleton() {\r\n    return (\r\n        <Swiper\r\n            modules={[Navigation]}\r\n            spaceBetween={20}\r\n            slidesPerView={8}\r\n            loop={true}\r\n            breakpoints={{\r\n                640: { slidesPerView: 3 },\r\n                960: { slidesPerView: 5 },\r\n                1280: { slidesPerView: 8 },\r\n            }}>\r\n            {Array.from(new Array(12)).map((_, idx) => (\r\n                <SwiperSlide key={idx}>\r\n                    <Card sx={{ aspectRatio: \"5 / 6\" }}>\r\n                        <Skeleton\r\n                            variant='rectangular'\r\n                            width='100%'\r\n                            height='100%'\r\n                            animation='wave'\r\n                        />\r\n                        <Box sx={{ p: 1.5 }}>\r\n                            <Skeleton\r\n                                variant='text'\r\n                                width='80%'\r\n                                animation='wave'\r\n                                sx={{ fontSize: \"1rem\" }}\r\n                            />\r\n                            <Skeleton\r\n                                variant='text'\r\n                                width='50%'\r\n                                animation='wave'\r\n                                sx={{ fontSize: \"0.8rem\" }}\r\n                            />\r\n                        </Box>\r\n                    </Card>\r\n                </SwiperSlide>\r\n            ))}\r\n        </Swiper>\r\n    );\r\n}\r\n","/** @format */\r\n\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Navigation, Autoplay } from \"swiper/modules\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/navigation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport ArrowBackIosNewIcon from \"@mui/icons-material/ArrowBackIosNew\";\r\nimport { Card, CardMedia, Box, Typography, IconButton } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nexport default function PopularSlider({ popularManga, onCardHover }) {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n\r\n    function getdetails(id) {\r\n        navigate(`/info/${id}`);\r\n    }\r\n    const swiperRef = useRef(null);\r\n\r\n    // refs for nav buttons\r\n    const prevRef = useRef(null);\r\n    const nextRef = useRef(null);\r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (swiperRef.current && prevRef.current && nextRef.current) {\r\n            swiperRef.current.params.navigation.prevEl = prevRef.current;\r\n            swiperRef.current.params.navigation.nextEl = nextRef.current;\r\n            swiperRef.current.navigation.init();\r\n            swiperRef.current.navigation.update();\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        const swiper = swiperRef.current;\r\n        if (!swiper) return;\r\n\r\n        const updateHover = () => {\r\n            // slidesPerView can be number or 'auto', make sure it's 1\r\n            if (swiper.params.slidesPerView === 1 && popularManga.length > 0) {\r\n                const activeIndex = swiper.activeIndex || 0;\r\n                const activeManga =\r\n                    popularManga[activeIndex % popularManga.length];\r\n                onCardHover(activeManga);\r\n            }\r\n        };\r\n\r\n        // Call on init\r\n        updateHover();\r\n\r\n        // Call on slide change\r\n        swiper.on(\"slideChange\", updateHover);\r\n\r\n        // Cleanup\r\n        return () => {\r\n            swiper.off(\"slideChange\", updateHover);\r\n        };\r\n    }, [popularManga, onCardHover]);\r\n\r\n    return (\r\n        <Box ref={containerRef}>\r\n            <Swiper\r\n                style={{ padding: \"40px 0\" }}\r\n                modules={[Navigation, Autoplay]}\r\n                onSwiper={(swiper) => (swiperRef.current = swiper)}\r\n                autoplay={{\r\n                    delay: 2500,\r\n                    disableOnInteraction: false,\r\n                    pauseOnMouseEnter: true,\r\n                    pauseOnVisibilityChange: true,\r\n                }}\r\n                loop={popularManga.length > 8}\r\n                spaceBetween={20}\r\n                slidesPerView={\r\n                    popularManga.length < 8 ? popularManga.length : 8\r\n                }\r\n                breakpoints={{\r\n                    1: { slidesPerView: 1 },\r\n                    640: { slidesPerView: 3 },\r\n                    960: { slidesPerView: 5 },\r\n                    1280: { slidesPerView: 8 },\r\n                }}>\r\n                {popularManga.map((manga, idx) => (\r\n                    <SwiperSlide key={idx}>\r\n                        <Card\r\n                            onClick={() => getdetails(manga.id)}\r\n                            onMouseEnter={() => onCardHover(manga)}\r\n                            sx={{\r\n                                width: \"100%\",\r\n                                position: \"relative\",\r\n                                aspectRatio: \"5 / 6\",\r\n                                overflow: \"hidden\",\r\n                                transition:\r\n                                    \"transform 0.4s ease, box-shadow 0.4s ease\",\r\n                                zIndex: 1,\r\n                                \"@media (hover: hover) and (pointer: fine)\": {\r\n                                    \"&:hover\": {\r\n                                        transform: \"scale(1.2)\",\r\n                                        boxShadow: `0 12px 30px ${\r\n                                            theme.palette.mode === \"dark\"\r\n                                                ? \"rgba(0,0,0,0.5)\"\r\n                                                : \"rgba(0,0,0,0.2)\"\r\n                                        }`,\r\n                                        zIndex: 10,\r\n                                    },\r\n\r\n                                    \"&::before\": {\r\n                                        content: '\"\"',\r\n                                        position: \"absolute\",\r\n                                        top: 0,\r\n                                        left: \"-75%\",\r\n                                        width: \"50%\",\r\n                                        height: \"100%\",\r\n                                        background:\r\n                                            theme.palette.mode === \"dark\"\r\n                                                ? \"linear-gradient(120deg, transparent, rgba(255,255,255,0.4), transparent)\"\r\n                                                : \"linear-gradient(120deg, transparent, rgba(0,0,0,0.2), transparent)\",\r\n                                        transform: \"skewX(-25deg)\",\r\n                                        zIndex: 5,\r\n                                    },\r\n                                    \"&:hover::before\": {\r\n                                        animation: \"shine 0.8s forwards\",\r\n                                    },\r\n                                    \"@keyframes shine\": {\r\n                                        \"100%\": { left: \"125%\" },\r\n                                    },\r\n                                },\r\n                            }}>\r\n                            <CardMedia\r\n                                component='img'\r\n                                image={`${manga.coverUrl}.256.jpg`}\r\n                                alt={manga.title}\r\n                                sx={{\r\n                                    cursor: \"pointer\",\r\n                                    width: \"100%\",\r\n                                    height: \"100%\",\r\n                                    objectFit: \"cover\",\r\n                                }}\r\n                            />\r\n\r\n                            {/* Overlay */}\r\n                            <Box\r\n                                sx={{\r\n                                    position: \"absolute\",\r\n                                    bottom: 0,\r\n                                    left: 0,\r\n                                    width: \"100%\",\r\n                                    backgroundColor:\r\n                                        theme.palette.mode === \"dark\"\r\n                                            ? \"rgba(0,0,0,0.6)\"\r\n                                            : \"rgba(255,255,255,0.6)\",\r\n                                    color: theme.palette.text.primary,\r\n                                    p: 1.5,\r\n                                }}>\r\n                                <Typography\r\n                                    variant='subtitle1'\r\n                                    fontWeight='bold'\r\n                                    noWrap>\r\n                                    {manga.title}\r\n                                </Typography>\r\n                                <Typography variant='body2' noWrap>\r\n                                    {manga.latestChapter}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Card>\r\n                    </SwiperSlide>\r\n                ))}\r\n            </Swiper>\r\n\r\n            {/* Custom Navigation Buttons */}\r\n            <IconButton\r\n                ref={prevRef}\r\n                aria-label='Previous'\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    left: -30,\r\n                    zIndex: 10,\r\n                    width: 60,\r\n                    height: \"100%\",\r\n                    borderRadius: 0,\r\n                    color: theme.palette.text.primary,\r\n                    display: { xs: \"none\", sm: \"flex\" },\r\n                    background: `linear-gradient(to right, ${theme.palette.background.default} 40%,  ${theme.palette.background.paper} 60%, transparent 100%)`,\r\n                    \"&:hover\": {\r\n                        background: `linear-gradient(to right, ${theme.palette.primary.main} 30%, transparent 100%)`,\r\n                    },\r\n                }}>\r\n                <ArrowBackIosNewIcon />\r\n            </IconButton>\r\n\r\n            <IconButton\r\n                ref={nextRef}\r\n                aria-label='Next'\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    right: -24,\r\n                    zIndex: 10,\r\n                    width: 60,\r\n                    height: \"100%\",\r\n                    borderRadius: 0,\r\n                    color: theme.palette.text.primary,\r\n                    display: { xs: \"none\", sm: \"flex\" },\r\n                    background: `linear-gradient(to left, ${theme.palette.background.default} 40%, ${theme.palette.background.paper} 60%, transparent 100%)`,\r\n                    \"&:hover\": {\r\n                        background: `linear-gradient(to left, ${theme.palette.primary.main} 30%,transparent 100%)`,\r\n                    },\r\n                }}>\r\n                <ArrowForwardIosIcon />\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\n","/** @format */\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nexport default function BgCard({ manga }) {\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n\r\n    function getdetails() {\r\n        navigate(`/info/${manga.id}`);\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                position: \"absolute\",\r\n                top: { xs: 20, sm: 30, md: 40 }, // responsive vertical spacing\r\n                left: { xs: \"50%\", sm: 60, md: 80 }, // center on mobile, offset on desktop\r\n                transform: { xs: \"translateX(-50%)\", sm: \"none\" }, // center horizontally on mobile\r\n                width: {\r\n                    xs: \"90%\", // almost full width on phones\r\n                    sm: \"80%\", // tablets\r\n                    md: 700, // fixed width on desktop\r\n                },\r\n                color: theme.palette.text.primary,\r\n                backgroundColor:\r\n                    theme.palette.mode === \"dark\"\r\n                        ? \"rgba(0,0,0,0.4)\"\r\n                        : \"rgba(255,255,255,0.4)\", // semi-transparent overlay\r\n                backdropFilter: \"blur(6px)\", // glass effect\r\n                boxShadow:\r\n                    theme.palette.mode === \"dark\"\r\n                        ? \"0 8px 24px rgba(0,0,0,0.3)\"\r\n                        : \"0 8px 24px rgba(0,0,0,0.1)\", // softer shadow\r\n                borderRadius: 3,\r\n            }}>\r\n            <CardContent>\r\n                <Typography\r\n                    variant='h4'\r\n                    component='div'\r\n                    onClick={getdetails}\r\n                    sx={{\r\n                        cursor: \"pointer\",\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                        whiteSpace: \"nowrap\",\r\n                        width: \"100%\",\r\n                        fontSize: { xs: \"1.4rem\", sm: \"1.6rem\", md: \"3rem\" },\r\n                    }}>\r\n                    {manga.title}\r\n                </Typography>\r\n\r\n                <Typography\r\n                    gutterBottom\r\n                    sx={{\r\n                        fontSize: { xs: 16, sm: 20, md: 22 },\r\n                        opacity: 0.9,\r\n                    }}>\r\n                    {manga.latestChapter}\r\n                </Typography>\r\n\r\n                <Typography\r\n                    component='div'\r\n                    sx={{\r\n                        mb: 1.5,\r\n                        fontWeight: \"bold\",\r\n                        opacity: 0.8,\r\n                        display: \"flex\",\r\n                        flexWrap: \"wrap\", // wrap chips responsively\r\n                    }}>\r\n                    {manga.categories.map((cat, index) => (\r\n                        <Chip\r\n                            onClick={() => navigate(`/tags?tags=${cat.value}`)}\r\n                            key={index}\r\n                            label={cat.label}\r\n                            variant='outlined'\r\n                            sx={{\r\n                                m: \"4px\",\r\n                                color: theme.palette.text.primary,\r\n                                borderColor: theme.palette.divider,\r\n                                backgroundColor:\r\n                                    theme.palette.mode === \"dark\"\r\n                                        ? \"rgba(255,255,255,0.08)\"\r\n                                        : \"rgba(0,0,0,0.08)\",\r\n                                fontWeight: \"bold\",\r\n                                \"&:hover\": {\r\n                                    backgroundColor:\r\n                                        theme.palette.mode === \"dark\"\r\n                                            ? \"rgba(255,255,255,0.15)\"\r\n                                            : \"rgba(0,0,0,0.15)\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </Typography>\r\n\r\n                <CardActions>\r\n                    <Button\r\n                        onClick={getdetails}\r\n                        variant='contained'\r\n                        sx={{\r\n                            background: `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,\r\n                            fontSize: {\r\n                                xs: \"0.8rem\",\r\n                                sm: \"0.9rem\",\r\n                                md: \"1rem\",\r\n                            },\r\n                            px: { xs: 1.5, sm: 2 },\r\n                        }}>\r\n                        Read Now\r\n                    </Button>\r\n                </CardActions>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n","/** @format */\r\nimport { calc } from \"@chakra-ui/react\";\r\nimport { Card, Box, Typography, keyframes } from \"@mui/material\";\r\n\r\nconst shimmer = keyframes`\r\n  0% { background-position: -450px 0 }\r\n  100% { background-position: 450px 0 }\r\n`;\r\n\r\nexport default function BgCardSkeleton() {\r\n    return (\r\n        <Card\r\n            sx={{\r\n                width: 700,\r\n                position: \"absolute\",\r\n                top: \"-300px\",\r\n                left: \"calc(50% - 350px)\",\r\n                color: \"white\",\r\n                backgroundColor: \"rgba(0,0,0,0.4)\",\r\n                backdropFilter: \"blur(6px)\",\r\n                boxShadow: \"0 8px 24px rgba(0,0,0,0.3)\",\r\n                borderRadius: 3,\r\n                p: 3,\r\n                overflow: \"hidden\",\r\n            }}>\r\n            {/* Animated gradient shimmer bar */}\r\n            <Box\r\n                sx={{\r\n                    width: \"100%\",\r\n                    height: \"10px\",\r\n                    borderRadius: \"10px\",\r\n                    mb: 3,\r\n                    background:\r\n                        \"linear-gradient(90deg, #222 25%, #444 50%, #222 75%)\",\r\n                    backgroundSize: \"400% 100%\",\r\n                    animation: `${shimmer} 1.5s infinite linear`,\r\n                }}\r\n            />\r\n\r\n            {/* Animated loading text */}\r\n            <Typography\r\n                variant='h5'\r\n                sx={{\r\n                    textAlign: \"center\",\r\n                    letterSpacing: 2,\r\n                    textTransform: \"uppercase\",\r\n                    fontWeight: \"bold\",\r\n                    background:\r\n                        \"linear-gradient(90deg,#ff512f,#dd2476,#ff512f)\",\r\n                    backgroundSize: \"200% auto\",\r\n                    WebkitBackgroundClip: \"text\",\r\n                    WebkitTextFillColor: \"transparent\",\r\n                    animation: \"moveGradient 2s linear infinite\",\r\n                    \"@keyframes moveGradient\": {\r\n                        \"0%\": { backgroundPosition: \"0% center\" },\r\n                        \"100%\": { backgroundPosition: \"200% center\" },\r\n                    },\r\n                }}>\r\n                Loading Manga...\r\n            </Typography>\r\n\r\n            {/* Pulsing box to mimic button */}\r\n            <Box\r\n                sx={{\r\n                    width: 160,\r\n                    height: 45,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    mx: \"auto\",\r\n                    mt: 3,\r\n                    borderRadius: 3,\r\n                    background: \"linear-gradient(90deg,#fa3200,#fe5c01)\",\r\n                    animation: \"pulse 1.5s infinite\",\r\n                    \"@keyframes pulse\": {\r\n                        \"0%\": { transform: \"scale(1)\" },\r\n                        \"50%\": { transform: \"scale(1.05)\" },\r\n                        \"100%\": { transform: \"scale(1)\" },\r\n                    },\r\n                }}>\r\n                <Typography variant='h6' sx={{ textAlign: \"center\" }}>\r\n                    Hold On...\r\n                </Typography>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n","/** @format */\r\nimport React from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useManga } from \"../../../hooks/useManga\";\r\nimport { Container } from \"@mui/material\";\r\nimport PopularSkeleton from \"./PopularLoader\";\r\nimport PopularSlider from \"./PopularSlider\";\r\nimport BgCard from \"./backgroundCard\";\r\nimport BgCardSkeleton from \"./BgCardSkeleton\";\r\nconst PopularManga = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const [manga, setManga] = React.useState({});\r\n    const { data, isLoading, isError, error } = useManga({\r\n        mode: \"popular\",\r\n        limit: 20,\r\n    });\r\n    function onCardHover(mangaData) {\r\n        setManga(mangaData);\r\n    }\r\n\r\n    if (isError) return <p>Error: {error.message}</p>;\r\n\r\n    const popularList = data || [];\r\n\r\n    const handleMangaClick = (id) => navigate(`/info/${id}`);\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    position: \"relative\",\r\n                    width: \"100%\",\r\n                    height: \"calc(100vh - 64px)\",\r\n                    backgroundImage: `linear-gradient(to right, ${\r\n                        theme.palette.mode === \"dark\"\r\n                            ? \"rgba(0,0,0,0.9), rgba(0,0,0,0.6)\"\r\n                            : \"rgba(255,255,255,0.9), rgba(255,255,255,0.6)\"\r\n                    }), url('${\r\n                        manga?.coverUrl && manga.coverUrl.trim() !== \"\"\r\n                            ? manga.coverUrl\r\n                            : \"https://images6.alphacoders.com/137/thumb-1920-1372163.jpeg\"\r\n                    }')`,\r\n                    backgroundSize: \"cover\",\r\n                    backgroundPosition: \"center 20%\",\r\n                    backgroundRepeat: \"no-repeat\",\r\n                }}>\r\n                {manga?.coverUrl ? <BgCard manga={manga} /> : null}\r\n                <Container\r\n                    maxWidth='item'\r\n                    sx={{\r\n                        position: \"absolute\",\r\n                        bottom: \"0\",\r\n                        zIndex: 1,\r\n                    }}>\r\n                    <Box\r\n                        sx={{\r\n                            position: \"relative\",\r\n                            width: \"100%\",\r\n                            paddingBottom: \"60px\",\r\n                        }}>\r\n                        {isLoading ? (\r\n                            // ------------------- Skeleton Loader -------------------\r\n                            <>\r\n                                <PopularSkeleton />\r\n                                <BgCardSkeleton />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <Container\r\n                                    maxWidth='item'\r\n                                    sx={{\r\n                                        position: \"absolute\",\r\n                                        bottom: \"0\",\r\n                                        zIndex: 1,\r\n                                    }}>\r\n                                    <PopularSlider\r\n                                        popularManga={popularList}\r\n                                        loadingPopular={isLoading}\r\n                                        onCardHover={onCardHover}\r\n                                    />\r\n                                </Container>\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                </Container>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PopularManga;\r\n// {\r\n//     popularList.map((manga) => (\r\n//         <Grid\r\n//             size={{ xs: 12, sm: 6, md: 4 }}\r\n//             key={manga.id}>\r\n//             <Card\r\n//                 sx={{\r\n//                     width: \"100%\",\r\n//                     display: \"flex\",\r\n//                     borderRadius: 3,\r\n//                     boxShadow: 3,\r\n//                     overflow: \"hidden\",\r\n//                     backgroundColor:\r\n//                         theme.palette.background.paper,\r\n//                     color: theme.palette.text.primary,\r\n//                     transition:\r\n//                         \"transform 0.4s ease, box-shadow 0.4s ease\",\r\n//                     zIndex: 1,\r\n//                     \"&:hover\": {\r\n//                         transform: \"scale(1.05)\",\r\n//                         boxShadow: `0 12px 30px ${theme.palette.primary.main}`,\r\n//                         zIndex: 10,\r\n//                     },\r\n//                 }}>\r\n//                 <CardMedia\r\n//                     onClick={() =>\r\n//                         handleMangaClick(manga.id)\r\n//                     }\r\n//                     component='img'\r\n//                     image={`${manga.coverUrl}.256.jpg`}\r\n//                     alt={manga.title}\r\n//                     sx={{\r\n//                         cursor: \"pointer\",\r\n//                         borderRadius: 3,\r\n//                         width: {\r\n//                             xs: \"100%\",\r\n//                             sm: 180,\r\n//                             md: 200,\r\n//                         },\r\n//                         height: {\r\n//                             xs: 200,\r\n//                             sm: \"auto\",\r\n//                             md: 250,\r\n//                         },\r\n//                         objectFit: \"cover\",\r\n//                     }}\r\n//                 />\r\n//                 <CardContent sx={{ p: 1, flex: 1 }}>\r\n//                     <Typography\r\n//                         onClick={() =>\r\n//                             handleMangaClick(manga.id)\r\n//                         }\r\n//                         variant='h6'\r\n//                         gutterBottom\r\n//                         noWrap\r\n//                         sx={{ cursor: \"pointer\" }}>\r\n//                         {manga.title}\r\n//                     </Typography>\r\n//                     <Box\r\n//                         sx={{\r\n//                             display: \"flex\",\r\n//                             justifyContent:\r\n//                                 \"space-between\",\r\n//                         }}>\r\n//                         <Typography variant='body2'>\r\n//                             ⭐{\" \"}\r\n//                             {manga.rating?.toFixed(1) ??\r\n//                                 \"N/A\"}\r\n//                         </Typography>\r\n//                         <Typography variant='body2'>\r\n//                             {manga.status}\r\n//                         </Typography>\r\n//                     </Box>\r\n//                 </CardContent>\r\n//             </Card>\r\n//         </Grid>\r\n//     ));\r\n// }\r\n","/** @format */\r\nimport React from \"react\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { format } from \"timeago.js\";\r\n\r\nconst MangaChapters = ({ chapters, mangaId, theme }) => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleChapterClick = (chapterId) =>\r\n        navigate(`/read/${mangaId}/${chapterId}`);\r\n\r\n    return (\r\n        <Box\r\n            gap={1}\r\n            sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                mt: 4,\r\n            }}>\r\n            {chapters.slice(0, 3).map((chapter) => (\r\n                <Button\r\n                    key={chapter.id}\r\n                    variant='outlined'\r\n                    color='accent'\r\n                    onClick={() => handleChapterClick(chapter.id)}\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        borderColor: theme.palette.accent.main,\r\n                        color: theme.palette.accent.main,\r\n                        \"&:hover\": {\r\n                            backgroundColor: theme.palette.accent.main,\r\n                            color: theme.palette.common.black,\r\n                        },\r\n                    }}>\r\n                    <Typography noWrap variant='caption'>\r\n                        chapter {chapter.number}\r\n                    </Typography>\r\n                    <Typography noWrap sx={{ fontSize: \"0.6rem\" }}>\r\n                        {format(chapter.updatedAt)}\r\n                    </Typography>\r\n                </Button>\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MangaChapters;\r\n","/** @format */\r\nimport React from \"react\";\r\nimport { Chip } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst MangaChips = ({ manga, theme }) => {\r\n    const navigate = useNavigate();\r\n    return (\r\n        <div\r\n            style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                width: \"100%\",\r\n            }}>\r\n            <Chip\r\n                label={`⭐ ${manga.rating?.toFixed(1) ?? \"N/A\"}`}\r\n                sx={{\r\n                    fontSize: \"0.7rem\",\r\n                    bgcolor: \"secondary.main\",\r\n                    color: \"white\",\r\n                    fontWeight: \"bold\",\r\n                    borderRadius: \"12px\",\r\n                }}\r\n            />\r\n            <Chip\r\n                label={`${manga?.status}`}\r\n                onClick={() => {\r\n                    navigate(\r\n                        `/tags?status=${\r\n                            manga?.status.charAt(0).toUpperCase() +\r\n                            manga?.status.slice(1)\r\n                        }&sort=Latest`\r\n                    );\r\n                }}\r\n                sx={{\r\n                    fontSize: \"0.7rem\",\r\n                    bgcolor: \"secondary.main\",\r\n                    color: \"white\",\r\n                    fontWeight: \"bold\",\r\n                    borderRadius: \"12px\",\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MangaChips;\r\n\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport {\r\n    Card,\r\n    CardMedia,\r\n    CardContent,\r\n    Typography,\r\n    Box,\r\n    Grid,\r\n} from \"@mui/material\";\r\nimport MangaChapters from \"./MangaChapters\";\r\nimport MangaChips from \"./MangaChips\";\r\n\r\nconst MangaCard = React.memo(({ manga, theme }) => {\r\n    const handleMangaClick = (id) => (window.location.href = `/info/${id}`);\r\n\r\n    return (\r\n        <Grid size={{ xs: 12, sm: 6, md: 4 }} sx={{ minWidth: 0 }}>\r\n            <Card\r\n                sx={{\r\n                    position: \"relative\",\r\n                    width: \"100%\",\r\n                    height: \"262px\",\r\n                    display: \"flex\",\r\n                    borderRadius: 3,\r\n                    boxShadow: 3,\r\n                    overflow: \"hidden\",\r\n                    backgroundColor: theme.palette.background.paper,\r\n                    color: theme.palette.text.primary,\r\n                    transition: \"transform 0.4s ease, box-shadow 0.4s ease\",\r\n                    zIndex: 1,\r\n                    \"@media (hover: hover) and (pointer: fine)\": {\r\n                        \"&::before\": {\r\n                            content: '\"\"',\r\n                            position: \"absolute\",\r\n                            top: 0,\r\n                            left: \"-75%\",\r\n                            width: \"50%\",\r\n                            height: \"100%\",\r\n                            background:\r\n                                theme.palette.mode === \"dark\"\r\n                                    ? \"linear-gradient(120deg, transparent, rgba(255,255,255,0.3), transparent)\"\r\n                                    : \"linear-gradient(120deg, transparent, rgba(0,0,0,0.2), transparent)\",\r\n                            transform: \"skewX(-25deg)\",\r\n                            transition: \"left 0.8s ease\",\r\n                            zIndex: 5,\r\n                        },\r\n                        \"&:hover\": {\r\n                            transform: \"translateY(-8px) scale(1.02)\",\r\n                            boxShadow: `0 12px 30px ${theme.palette.primary.main}30`,\r\n                            zIndex: 10,\r\n                        },\r\n                        \"&:hover::before\": {\r\n                            left: \"125%\",\r\n                        },\r\n                    },\r\n                }}>\r\n                <CardMedia\r\n                    onClick={() => handleMangaClick(manga.id)}\r\n                    component='img'\r\n                    image={`${manga.coverUrl}.256.jpg`}\r\n                    alt={manga.title}\r\n                    sx={{\r\n                        cursor: \"pointer\",\r\n                        borderRadius: 3,\r\n                        width: { xs: \"40%\", sm: 180, md: 200 },\r\n                        height: { xs: \"auto\", sm: \"auto\", md: 250 },\r\n                        objectFit: \"cover\",\r\n                    }}\r\n                />\r\n                <CardContent\r\n                    sx={{\r\n                        p: 1,\r\n                        overflow: \"hidden\",\r\n                        flex: 1,\r\n                        backgroundColor: \"transparent\",\r\n                        color: theme.palette.text.primary,\r\n                    }}>\r\n                    <Box p={1}>\r\n                        <Typography\r\n                            onClick={() => handleMangaClick(manga.id)}\r\n                            sx={{\r\n                                cursor: \"pointer\",\r\n                                color: theme.palette.text.primary,\r\n                            }}\r\n                            variant='h6'\r\n                            component='div'\r\n                            gutterBottom\r\n                            noWrap>\r\n                            {manga.title}\r\n                        </Typography>\r\n                        <MangaChips manga={manga} theme={theme} />\r\n                    </Box>\r\n                    <MangaChapters\r\n                        chapters={manga.chapters}\r\n                        mangaId={manga.id}\r\n                        theme={theme}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nexport default MangaCard;\r\n","/** @format */\r\n\r\nimport * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nexport default function SectionTitle({ title }) {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Box>\r\n            <Toolbar disableGutters>\r\n                <Typography\r\n                    variant='h4'\r\n                    fontWeight='bold'\r\n                    sx={{\r\n                        flexGrow: 1,\r\n                        color: theme.palette.text.primary,\r\n                    }}>\r\n                    {title}\r\n                </Typography>\r\n            </Toolbar>\r\n        </Box>\r\n    );\r\n}\r\n","/** @format */\r\nimport React from \"react\";\r\nimport { Container, Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { useMangaInfinite } from \"../../../hooks/useManga\";\r\nimport MangaCard from \"./MangaCard\";\r\nimport LatestMangaSkeleton from \"./mangaLoader\";\r\nimport SectionTitle from \"./sectionTitle\";\r\n\r\nconst LatestManga = () => {\r\n    const theme = useTheme();\r\n    const {\r\n        data,\r\n        fetchNextPage,\r\n        hasNextPage,\r\n        isFetchingNextPage,\r\n        isLoading,\r\n        isError,\r\n        error,\r\n    } = useMangaInfinite({ mode: \"latest\", limit: 20 , query: true});\r\n\r\n    const mangaList = data?.pages?.flat() || [];\r\n\r\n    if (isLoading)\r\n        return (\r\n            <Container maxWidth='lg' sx={{ padding: 2 }}>\r\n                <Grid container spacing={1}>\r\n                    <LatestMangaSkeleton />\r\n                </Grid>\r\n            </Container>\r\n        );\r\n\r\n    if (isError) return <p>Error: {error.message}</p>;\r\n\r\n    return (\r\n        <Container maxWidth='lg' sx={{ padding: 2 }}>\r\n            <SectionTitle title='Latest Manga' />\r\n            <InfiniteScroll\r\n                dataLength={mangaList.length}\r\n                next={fetchNextPage}\r\n                hasMore={!!hasNextPage}\r\n                style={{ overflow: \"visible\" }}>\r\n                <Grid container spacing={1}>\r\n                    {mangaList.map((manga) => (\r\n                        <MangaCard key={manga.id} manga={manga} theme={theme} />\r\n                    ))}\r\n                    {isFetchingNextPage && (\r\n                        <LatestMangaSkeleton dataLength={mangaList.length} />\r\n                    )}\r\n                </Grid>\r\n            </InfiniteScroll>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default LatestManga;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport PopularManga from \"./Popular/PopularManga\";\r\nimport LatestManga from \"./latest/LatestManga\";\r\nimport { Profiler } from \"react\";\r\nconst HomePage = () => {\r\n    return (\r\n        <>\r\n            <PopularManga />\r\n            <LatestManga />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n"],"names":["LatestMangaSkeleton","_ref","dataLength","remainder","emptySlots","_jsx","_Fragment","children","Array","from","length","map","_","index","Grid","size","xs","sm","md","_jsxs","Card","sx","width","height","display","borderRadius","boxShadow","overflow","Skeleton","variant","flexShrink","CardContent","flex","Box","mt","mb","PopularSkeleton","Swiper","modules","Navigation","spaceBetween","slidesPerView","loop","breakpoints","idx","SwiperSlide","aspectRatio","animation","p","fontSize","PopularSlider","popularManga","onCardHover","theme","useTheme","navigate","useNavigate","swiperRef","useRef","prevRef","nextRef","containerRef","useEffect","current","params","navigation","prevEl","nextEl","init","update","swiper","updateHover","activeIndex","activeManga","on","off","ref","style","padding","Autoplay","onSwiper","autoplay","delay","disableOnInteraction","pauseOnMouseEnter","pauseOnVisibilityChange","manga","onClick","getdetails","id","concat","onMouseEnter","position","transition","zIndex","transform","palette","mode","content","top","left","background","CardMedia","component","image","coverUrl","alt","title","cursor","objectFit","bottom","backgroundColor","color","text","primary","Typography","fontWeight","noWrap","latestChapter","IconButton","default","paper","main","ArrowBackIosNewIcon","right","ArrowForwardIosIcon","BgCard","backdropFilter","textOverflow","whiteSpace","gutterBottom","opacity","flexWrap","categories","cat","Chip","value","label","m","borderColor","divider","CardActions","Button","secondary","px","shimmer","keyframes","_templateObject","_taggedTemplateLiteral","BgCardSkeleton","backgroundSize","textAlign","letterSpacing","textTransform","WebkitBackgroundClip","WebkitTextFillColor","backgroundPosition","justifyContent","alignItems","mx","PopularManga","setManga","React","data","isLoading","isError","error","useManga","limit","message","popularList","backgroundImage","trim","backgroundRepeat","Container","maxWidth","paddingBottom","loadingPopular","mangaData","chapters","mangaId","gap","flexDirection","slice","chapter","handleChapterClick","chapterId","accent","common","black","number","format","updatedAt","_manga$rating$toFixed","_manga$rating","rating","toFixed","bgcolor","status","charAt","toUpperCase","handleMangaClick","window","location","href","minWidth","MangaChips","MangaChapters","SectionTitle","Toolbar","disableGutters","flexGrow","LatestManga","_data$pages","fetchNextPage","hasNextPage","isFetchingNextPage","useMangaInfinite","query","mangaList","pages","flat","container","spacing","InfiniteScroll","next","hasMore","MangaCard","HomePage"],"sourceRoot":""}